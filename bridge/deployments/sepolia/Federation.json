{
  "address": "0xC32026A9A2Fa75975ba5d76c9Cf94bcE0b79eFee",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "BridgeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "federator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fedVersion",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fedChainsIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fedChainsBlocks",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "fedChainsInfo",
          "type": "string[]"
        }
      ],
      "name": "HeartBeat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "federator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MEMBER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fedVersion",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "fedChainsIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fedChainsBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "fedChainsInfo",
          "type": "string[]"
        }
      ],
      "name": "emitHeartbeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "getTransactionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionIdMultichain",
          "type": "bytes32"
        }
      ],
      "name": "isProcessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionIdMultichain",
          "type": "bytes32"
        }
      ],
      "name": "isVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldMember",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        }
      ],
      "name": "transactionWasProcessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "originalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "logIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "originChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "voteTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a3fca1d741b3acf75acd536dcea5d0cef3f3edd8b7272ef2dad46f6909d5a78",
  "receipt": {
    "to": null,
    "from": "0xCC3CF44397Daa4572CDb20f72dee5700507454E4",
    "contractAddress": "0xC32026A9A2Fa75975ba5d76c9Cf94bcE0b79eFee",
    "transactionIndex": 142,
    "gasUsed": "1860439",
    "logsBloom": "0x
    "blockHash": "0xc611ba9de8105e10134c1cb556e6c2894eb6e60dc0f2233e99eaa3a18ca89c72",
    "transactionHash": "0x0a3fca1d741b3acf75acd536dcea5d0cef3f3edd8b7272ef2dad46f6909d5a78",
    "logs": [],
    "blockNumber": 7596168,
    "cumulativeGasUsed": "15525161",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1bab7576ed0e6de57791fa4ae4a96ffa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fedVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fedChainsIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fedChainsBlocks\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"fedChainsInfo\",\"type\":\"string[]\"}],\"name\":\"HeartBeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MEMBER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fedVersion\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"fedChainsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fedChainsBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"fedChainsInfo\",\"type\":\"string[]\"}],\"name\":\"emitHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"getTransactionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionIdMultichain\",\"type\":\"bytes32\"}],\"name\":\"isProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionIdMultichain\",\"type\":\"bytes32\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"transactionWasProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"voteTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMember(address)\":{\"params\":{\"_newMember\":\"address of the new member\"}},\"changeRequirement(uint256)\":{\"details\":\"Emits the RequirementChange event\",\"params\":{\"_required\":\"the number of minimum members to approve an transaction, it has to be bigger than 1\"}},\"emitHeartbeat(string,uint256[],uint256[],string[])\":{\"details\":\"Emits HeartBeat event\"},\"getMembers()\":{\"returns\":{\"_0\":\"Current members\"}},\"getTransactionCount(bytes32)\":{\"params\":{\"transactionId\":\"The transaction hashed from getTransactionId function\"}},\"getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)\":{\"details\":\"It encodes and applies keccak256 to the parameters received in the same order\",\"params\":{\"amount\":\"Could be the amount or the tokenId\",\"blockHash\":\"The block hash in which the transaction with the cross event occurred\",\"destinationChainId\":\"Is chainId of the destination chain\",\"logIndex\":\"Index of the event in the logs\",\"originChainId\":\"Is chainId of the original chain\",\"originalTokenAddress\":\"The address of the token in the origin (main) chain\",\"receiver\":\"Who is going to receive the token in the opposite chain\",\"sender\":\"The address who solicited the cross token\",\"transactionHash\":\"The transaction in which the cross event occurred\"},\"returns\":{\"_0\":\"The hash generated by the parameters.\"}},\"initialize(address)\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeMember(address)\":{\"params\":{\"_oldMember\":\"address of the member to be removed from federation\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBridge(address)\":{\"details\":\"Emits BridgeChanged event\",\"params\":{\"_bridge\":\"the new bridge contract address that should implement the IBridge interface\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"version in v{Number}\"}},\"voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)\":{\"params\":{\"blockHash\":\"The block hash in which the transaction with the cross event occurred\",\"destinationChainId\":\"Is chainId of the destination chain\",\"logIndex\":\"Index of the event in the logs\",\"originChainId\":\"Is chainId of the original chain\",\"originalTokenAddress\":\"The address of the token in the origin (main) chain\",\"receiver\":\"Who is going to receive the token in the opposite chain\",\"sender\":\"The address who solicited the cross token\",\"transactionHash\":\"The transaction in which the cross event occurred\",\"value\":\"Amount\"}}},\"stateVariables\":{\"isMember\":{\"details\":\"The address should be a member to vote in transactions\"},\"required\":{\"details\":\"It should have at least the required amount of members\"},\"votes\":{\"details\":\"the members should approve the transaction by 50% + 1\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(address)\":{\"notice\":\"Add a new member to the federation\"},\"changeRequirement(uint256)\":{\"notice\":\"Changes the number of required members to vote and approve an transaction\"},\"emitHeartbeat(string,uint256[],uint256[],string[])\":{\"notice\":\"It emits an HeartBeat like an health check\"},\"getMembers()\":{\"notice\":\"Return all the current members of the federation\"},\"getTransactionCount(bytes32)\":{\"notice\":\"Get the amount of approved votes for that transactionId\"},\"getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)\":{\"notice\":\"Gets the hash of transaction from the following parameters encoded and keccaked\"},\"isMember(address)\":{\"notice\":\"All the addresses that are members of the federation\"},\"processed(bytes32)\":{\"notice\":\"(bytes32) transactionId => (bool) votedCheck if that transaction was already processed\"},\"removeMember(address)\":{\"notice\":\"Remove a member of the federation\"},\"required()\":{\"notice\":\"The minimum amount of votes to approve a transaction\"},\"setBridge(address)\":{\"notice\":\"Sets a new bridge contract\"},\"version()\":{\"notice\":\"Current version of the contract\"},\"voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)\":{\"notice\":\"Vote in a transaction, if it has enough votes it accepts the transfer\"},\"votes(bytes32,address)\":{\"notice\":\"(bytes32) transactionId = keccak256( abi.encodePacked( originalTokenAddress, sender, receiver, amount, blockHash, transactionHash, logIndex ) ) => ( (address) members => (bool) voted )Votes by members by the transaction ID\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Federation/Federation.sol\":\"Federation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Federation/Federation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\n// Upgradables\\nimport \\\"../zeppelin/upgradable/Initializable.sol\\\";\\nimport \\\"../zeppelin/upgradable/ownership/UpgradableOwnable.sol\\\";\\nimport \\\"../zeppelin/utils/Address.sol\\\";\\nimport \\\"../zeppelin/upgradable/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interface/IBridge.sol\\\";\\nimport \\\"../interface/IFederation.sol\\\";\\ncontract Federation is Initializable, UpgradableOwnable, IFederation, ReentrancyGuard {\\n\\n\\tusing Address for address;\\n\\n\\tuint constant public MAX_MEMBER_COUNT = 50;\\n\\taddress constant private NULL_ADDRESS = address(0);\\n\\n\\tIBridge public bridge;\\n\\taddress[] public members;\\n\\n\\t/**\\n\\t\\t@notice The minimum amount of votes to approve a transaction\\n\\t\\t@dev It should have at least the required amount of members\\n\\t\\t*/\\n\\tuint public required;\\n\\n\\t/**\\n\\t\\t@notice All the addresses that are members of the federation\\n\\t\\t@dev The address should be a member to vote in transactions\\n\\t\\t*/\\n\\tmapping (address => bool) public isMember;\\n\\n\\t/**\\n\\t\\t(bytes32) transactionId = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex\\n\\t\\t\\t)\\n\\t\\t) => (\\n\\t\\t\\t(address) members => (bool) voted\\n\\t\\t)\\n\\t\\t@notice Votes by members by the transaction ID\\n\\t\\t@dev the members should approve the transaction by 50% + 1\\n\\t\\t*/\\n\\tmapping (bytes32 => mapping (address => bool)) public votes;\\n\\n\\t/**\\n\\t\\t(bytes32) transactionId => (bool) voted\\n\\t\\t@notice Check if that transaction was already processed\\n\\t*/\\n\\tmapping(bytes32 => bool) public processed;\\n\\n\\tmodifier onlyMember() {\\n\\t\\trequire(isMember[_msgSender()], \\\"Federation: Not Federator\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier validRequirement(uint membersCount, uint _required) {\\n\\t\\trequire(_required <= membersCount && _required != 0 && membersCount != 0, \\\"Federation: Invalid requirements\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress[] calldata _members,\\n\\t\\tuint _required,\\n\\t\\taddress _bridge,\\n\\t\\taddress owner\\n\\t) public validRequirement(_members.length, _required) initializer {\\n\\t\\tUpgradableOwnable.initialize(owner);\\n\\t\\trequire(_members.length <= MAX_MEMBER_COUNT, \\\"Federation: Too many members\\\");\\n\\t\\tmembers = _members;\\n\\t\\tfor (uint i = 0; i < _members.length; i++) {\\n\\t\\t\\trequire(!isMember[_members[i]] && _members[i] != NULL_ADDRESS, \\\"Federation: Invalid members\\\");\\n\\t\\t\\tisMember[_members[i]] = true;\\n\\t\\t\\temit MemberAddition(_members[i]);\\n\\t\\t}\\n\\t\\trequired = _required;\\n\\t\\temit RequirementChange(required);\\n\\t\\t_setBridge(_bridge);\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Current version of the contract\\n\\t\\t@return version in v{Number}\\n\\t\\t*/\\n\\tfunction version() external pure override returns (string memory) {\\n\\t\\treturn \\\"v3\\\";\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Sets a new bridge contract\\n\\t\\t@dev Emits BridgeChanged event\\n\\t\\t@param _bridge the new bridge contract address that should implement the IBridge interface\\n\\t\\t*/\\n\\tfunction setBridge(address _bridge) external onlyOwner override {\\t\\t\\n\\t\\t_setBridge(_bridge);\\n\\t}\\n\\n\\tfunction _setBridge(address _bridge) internal {\\n\\t\\trequire(_bridge != NULL_ADDRESS, \\\"Federation: Empty bridge\\\");\\n\\t\\trequire (_bridge.isContract(), \\\"Federation: Bridge is not a contract\\\");\\n\\t\\tbridge = IBridge(_bridge);\\n\\t\\temit BridgeChanged(_bridge);\\n\\t}\\n\\n\\tfunction validateTransaction(bytes32 transactionId, bytes32 transactionIdMultichain) internal view returns(bool) {\\n\\t\\tuint256 minimumVotes = getMinimalNumberOfVotes();\\n\\t\\tuint256 amountVotes = 0;\\n\\n    for (uint256 i = 0; i < members.length; i++) {\\n      if (votes[transactionIdMultichain][members[i]]) {\\n        amountVotes += 1;\\n\\t\\t\\t} else if (votes[transactionId][members[i]]) {\\n        amountVotes += 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (amountVotes >= minimumVotes && amountVotes >= required) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n    }\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction getMinimalNumberOfVotes() internal view returns(uint256) {\\n\\t\\treturn members.length / 2 + 1;\\n\\t}\\n\\n\\tfunction isProcessed(bytes32 transactionId, bytes32 transactionIdMultichain) public view returns(bool) {\\n\\t\\treturn processed[transactionIdMultichain] || processed[transactionId];\\n\\t}\\n\\n\\tfunction isVoted(bytes32 transactionId, bytes32 transactionIdMultichain) public view returns(bool) {\\n\\t\\treturn votes[transactionIdMultichain][_msgSender()] || votes[transactionId][_msgSender()];\\n\\t}\\n\\n\\tfunction shouldBeCurrentChainId(uint256 chainId) internal view {\\n\\t\\trequire(chainId == block.chainid, \\\"Federation: Not block.chainid\\\");\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Vote in a transaction, if it has enough votes it accepts the transfer\\n\\t\\t@param originalTokenAddress The address of the token in the origin (main) chain\\n\\t\\t@param sender The address who solicited the cross token\\n\\t\\t@param receiver Who is going to receive the token in the opposite chain\\n\\t\\t@param value Amount\\n\\t\\t@param blockHash The block hash in which the transaction with the cross event occurred\\n\\t\\t@param transactionHash The transaction in which the cross event occurred\\n\\t\\t@param logIndex Index of the event in the logs\\n\\t\\t@param originChainId Is chainId of the original chain\\n\\t\\t@param destinationChainId Is chainId of the destination chain\\n\\t\\t*/\\n\\tfunction voteTransaction(\\n\\t\\taddress originalTokenAddress,\\n\\t\\taddress payable sender,\\n\\t\\taddress payable receiver,\\n\\t\\tuint256 value,\\n\\t\\tbytes32 blockHash,\\n\\t\\tbytes32 transactionHash,\\n\\t\\tuint32 logIndex,\\n\\t\\tuint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n\\t) external onlyMember nonReentrant override {\\n\\t\\tshouldBeCurrentChainId(destinationChainId);\\n\\t\\tbytes32 transactionId = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tbytes32 transactionIdMultichain = getTransactionId(\\n\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\tsender,\\n\\t\\t\\treceiver,\\n\\t\\t\\tvalue,\\n\\t\\t\\tblockHash,\\n\\t\\t\\ttransactionHash,\\n\\t\\t\\tlogIndex,\\n\\t\\t\\toriginChainId,\\n\\t\\t\\tdestinationChainId\\n\\t\\t);\\n\\n\\t\\tif (isProcessed(transactionId, transactionIdMultichain))\\n\\t\\t\\treturn;\\n\\n\\t\\tif (isVoted(transactionId, transactionIdMultichain))\\n\\t\\t\\treturn;\\n\\n\\t\\tvotes[transactionIdMultichain][_msgSender()] = true;\\n\\t\\temit Voted(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\ttransactionHash,\\n\\t\\t\\ttransactionIdMultichain,\\n\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\tsender,\\n\\t\\t\\treceiver,\\n\\t\\t\\tvalue,\\n\\t\\t\\tblockHash,\\n\\t\\t\\tlogIndex,\\n\\t\\t\\toriginChainId,\\n\\t\\t\\tdestinationChainId\\n\\t\\t);\\n\\n\\t\\tif (validateTransaction(transactionId, transactionIdMultichain)) {\\n\\t\\t\\tprocessed[transactionIdMultichain] = true;\\n\\n\\t\\t\\tacceptTransfer(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex,\\n\\t\\t\\t\\t\\n\\t\\t\\t\\toriginChainId,\\n\\t\\t\\t\\tdestinationChainId\\n\\t\\t\\t);\\n\\n\\t\\t\\temit Executed(\\n\\t\\t\\t\\t_msgSender(),\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\ttransactionIdMultichain,\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\tlogIndex,\\n\\t\\t\\t\\toriginChainId,\\n\\t\\t\\t\\tdestinationChainId\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n  function acceptTransfer(\\n    address originalTokenAddress,\\n    address payable sender,\\n    address payable receiver,\\n    uint256 value,\\n    bytes32 blockHash,\\n    bytes32 transactionHash,\\n    uint32 logIndex,\\n\\tuint256 originChainId,\\n\\tuint256\\tdestinationChainId\\n  ) internal {\\n\\t  bridge.acceptTransfer(\\n\\t\\toriginalTokenAddress,\\n\\t\\tsender,\\n\\t\\treceiver,\\n\\t\\tvalue,\\n\\t\\tblockHash,\\n\\t\\ttransactionHash,\\n\\t\\tlogIndex,\\n\\t\\toriginChainId,\\n\\t\\tdestinationChainId\\n\\t  );\\n  }\\n\\n  /**\\n    @notice Get the amount of approved votes for that transactionId\\n    @param transactionId The transaction hashed from getTransactionId function\\n   */\\n  function getTransactionCount(bytes32 transactionId) public view returns(uint) {\\n    uint count = 0;\\n    for (uint i = 0; i < members.length; i++) {\\n      if (votes[transactionId][members[i]])\\n        count += 1;\\n    }\\n    return count;\\n  }\\n\\n\\tfunction hasVoted(bytes32 transactionId) external view returns(bool) {\\n\\t\\treturn votes[transactionId][_msgSender()];\\n\\t}\\n\\n\\tfunction transactionWasProcessed(bytes32 transactionId) external view returns(bool) {\\n\\t\\treturn processed[transactionId];\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Gets the hash of transaction from the following parameters encoded and keccaked\\n\\t\\t@dev It encodes and applies keccak256 to the parameters received in the same order\\n\\t\\t@param originalTokenAddress The address of the token in the origin (main) chain\\n\\t\\t@param sender The address who solicited the cross token\\n\\t\\t@param receiver Who is going to receive the token in the opposite chain\\n\\t\\t@param amount Could be the amount or the tokenId\\n\\t\\t@param blockHash The block hash in which the transaction with the cross event occurred\\n\\t\\t@param transactionHash The transaction in which the cross event occurred\\n\\t\\t@param logIndex Index of the event in the logs\\n\\t\\t@param originChainId Is chainId of the original chain\\n\\t\\t@param destinationChainId Is chainId of the destination chain\\n\\t\\t@return The hash generated by the parameters.\\n\\t*/\\n\\tfunction getTransactionId(\\n\\t\\taddress originalTokenAddress,\\n\\t\\taddress sender,\\n\\t\\taddress receiver,\\n\\t\\tuint256 amount,\\n\\t\\tbytes32 blockHash,\\n\\t\\tbytes32 transactionHash,\\n\\t\\tuint32 logIndex,\\n\\t\\tuint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n\\t) public pure returns(bytes32) {\\n\\t\\treturn keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\toriginalTokenAddress,\\n\\t\\t\\t\\tsender,\\n\\t\\t\\t\\treceiver,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tblockHash,\\n\\t\\t\\t\\ttransactionHash,\\n\\t\\t\\t\\tlogIndex,\\n\\t\\t\\t\\toriginChainId,\\n\\t\\t\\t\\tdestinationChainId\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction addMember(address _newMember) external onlyOwner override {\\n\\t\\trequire(_newMember != NULL_ADDRESS, \\\"Federation: Empty member\\\");\\n\\t\\trequire(!isMember[_newMember], \\\"Federation: Member already exists\\\");\\n\\t\\trequire(members.length < MAX_MEMBER_COUNT, \\\"Federation: Max members reached\\\");\\n\\n\\t\\tisMember[_newMember] = true;\\n\\t\\tmembers.push(_newMember);\\n\\t\\temit MemberAddition(_newMember);\\n\\t}\\n\\n\\tfunction removeMember(address _oldMember) external onlyOwner override {\\n\\t\\trequire(_oldMember != NULL_ADDRESS, \\\"Federation: Empty member\\\");\\n\\t\\trequire(isMember[_oldMember], \\\"Federation: Member doesn't exists\\\");\\n\\t\\trequire(members.length > 1, \\\"Federation: Can't remove all the members\\\");\\n\\t\\trequire(members.length - 1 >= required, \\\"Federation: Can't have less than required members\\\");\\n\\n\\t\\tisMember[_oldMember] = false;\\n\\t\\tfor (uint i = 0; i < members.length - 1; i++) {\\n\\t\\t\\tif (members[i] == _oldMember) {\\n\\t\\t\\t\\tmembers[i] = members[members.length - 1];\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tmembers.pop(); // remove an element from the end of the array.\\n\\t\\temit MemberRemoval(_oldMember);\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Return all the current members of the federation\\n\\t\\t@return Current members\\n\\t\\t*/\\n\\tfunction getMembers() external view override returns (address[] memory) {\\n\\t\\treturn members;\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice Changes the number of required members to vote and approve an transaction\\n\\t\\t@dev Emits the RequirementChange event\\n\\t\\t@param _required the number of minimum members to approve an transaction, it has to be bigger than 1\\n\\t\\t*/\\n\\tfunction changeRequirement(uint _required) external onlyOwner validRequirement(members.length, _required) override {\\n\\t\\trequire(_required >= 2, \\\"Federation: Requires at least 2\\\");\\n\\t\\trequired = _required;\\n\\t\\temit RequirementChange(_required);\\n\\t}\\n\\n\\t/**\\n\\t\\t@notice It emits an HeartBeat like an health check\\n\\t\\t@dev Emits HeartBeat event\\n\\t\\t*/\\n\\tfunction emitHeartbeat(\\n\\t\\tstring calldata fedVersion,\\n\\t\\tuint256[] calldata fedChainsIds,\\n\\t\\tuint256[] calldata fedChainsBlocks,\\n\\t\\tstring[] calldata fedChainsInfo\\n\\t) external onlyMember override {\\n\\t\\trequire(fedChainsIds.length == fedChainsBlocks.length &&\\n\\t\\t\\tfedChainsIds.length == fedChainsInfo.length, \\\"Federation: Length missmatch\\\");\\n\\t\\temit HeartBeat(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tblock.chainid,\\n\\t\\t\\tblock.number,\\n\\t\\t\\tfedVersion,\\n\\t\\t\\tfedChainsIds,\\n\\t\\t\\tfedChainsBlocks,\\n\\t\\t\\tfedChainsInfo\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x625fbbbe757e96e4f8412bade9f54517fe1e4fbafceb0a4df52460f4d0c6c2cd\",\"license\":\"MIT\"},\"contracts/interface/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\ninterface IBridge {\\n\\n\\tstruct ClaimData {\\n\\t\\taddress payable to;\\n\\t\\tuint256 amount;\\n\\t\\tbytes32 blockHash;\\n\\t\\tbytes32 transactionHash;\\n\\t\\tuint32 logIndex;\\n\\t\\tuint256 originChainId;\\n\\t}\\n\\n\\tstruct OriginalToken {\\n\\t\\taddress tokenAddress;\\n\\t\\tuint256 originChainId;\\n\\t}\\n\\t\\n\\tstruct CreateSideTokenStruct {\\n\\t\\tuint256 _typeId;\\n\\t\\taddress _originalTokenAddress;\\n\\t\\tuint8 _originalTokenDecimals;\\n\\t\\tstring _originalTokenSymbol;\\n\\t\\tstring _originalTokenName;\\n\\t\\tuint256 _originChainId;\\n\\t}\\n\\n\\tfunction version() external pure returns (string memory);\\n\\n\\tfunction getFeePercentage() external view returns(uint);\\n\\n\\t/**\\n\\t\\t* ERC-20 tokens approve and transferFrom pattern\\n\\t\\t* See https://eips.ethereum.org/EIPS/eip-20#transferfrom\\n\\t\\t*/\\n\\tfunction receiveTokensTo(uint256 chainId, address tokenToUse, string memory hathorTo, uint256 amount) external;\\n\\n\\t/**\\n\\t\\t* Use network currency and cross it.\\n\\t\\t*/\\n\\tfunction depositTo(uint256 chainId, string memory hathorTo) external payable;\\n\\n\\t/**\\n\\t\\t* ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\\n\\t\\t* See https://eips.ethereum.org/EIPS/eip-777#motivation for details\\n\\t\\t* @param userData it can be 2 options in the first one you can send the receiver and the chain id of the destination\\n\\t\\t* const userData = web3.eth.abi.encodeParameters(\\n    *   [\\\"address\\\", \\\"uint256\\\"],\\n    *   [anAccount.toLowerCase(), chains.ETHEREUM_MAIN_NET_CHAIN_ID]\\n    * );\\n\\t\\t* or you also can send only the destination chain id, and the receiver would be the same as the from parameter\\n\\t\\t* const userData = web3.eth.abi.encodeParameters([\\\"uint256\\\"], [chains.ETHEREUM_MAIN_NET_CHAIN_ID]);\\n\\t\\t*/\\n\\tfunction tokensReceived (\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint amount,\\n\\t\\tbytes calldata userData,\\n\\t\\tbytes calldata operatorData\\n\\t) external;\\n\\n\\t/**\\n\\t\\t* Accepts the transaction from the other chain that was voted and sent by the Federation contract\\n\\t\\t*/\\n\\tfunction acceptTransfer(\\n\\t\\taddress _originalTokenAddress,\\n\\t\\taddress payable _from,\\n\\t\\taddress payable _to,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tbytes32 _transactionHash,\\n\\t\\tuint32 _logIndex,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256\\t_destinationChainId\\n\\t) external;\\n\\n\\t/**\\n\\t\\t* Claims the crossed transaction using the hash, this sends the funds to the address indicated in\\n\\t\\t*/\\n\\tfunction claim(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\\n\\n\\tfunction claimFallback(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\\n\\n\\tfunction claimGasless(\\n\\t\\tClaimData calldata _claimData,\\n\\t\\taddress payable _relayer,\\n\\t\\tuint256 _fee,\\n\\t\\tuint256 _deadline,\\n\\t\\tuint8 _v,\\n\\t\\tbytes32 _r,\\n\\t\\tbytes32 _s\\n\\t) external returns (uint256 receivedAmount);\\n\\n\\tfunction createSideToken(\\n\\t\\tuint256 _typeId,\\n\\t\\taddress _originalTokenAddress,\\n\\t\\tuint8 _originalTokenDecimals,\\n\\t\\tstring calldata _originalTokenSymbol,\\n\\t\\tstring calldata _originalTokenName,\\n\\t\\tuint256 _chainId\\n\\t) external;\\n\\n\\tfunction createMultipleSideTokens(\\n\\t\\tCreateSideTokenStruct[] calldata createSideTokenStruct\\n\\t) external;\\n\\n\\tfunction getTransactionDataHash(\\n\\t\\taddress _to,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tbytes32 _transactionHash,\\n\\t\\tuint32 _logIndex,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256 _destinationChainId\\n\\t) external returns(bytes32);\\n\\n\\tevent Cross(\\n\\t\\taddress indexed _tokenAddress,\\n\\t\\tstring _to,\\n\\t\\tuint256 indexed _destinationChainId,\\n\\t\\taddress _from,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes _userData\\n\\t);\\n\\n\\tevent NewSideToken(\\n\\t\\taddress indexed _newSideTokenAddress,\\n\\t\\taddress indexed _originalTokenAddress,\\n\\t\\tstring _newSymbol,\\n\\t\\tuint256 _granularity,\\n\\t\\tuint256 _chainId\\n\\t);\\n\\tevent AcceptedCrossTransfer(\\n\\t\\tbytes32 indexed _transactionHash,\\n\\t\\taddress indexed _originalTokenAddress,\\n\\t\\taddress indexed _to,\\n\\t\\taddress  _from,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tuint256 _logIndex,\\n\\t\\tuint256 _originChainId,\\n\\t\\tuint256\\t_destinationChainId\\n\\t);\\n\\tevent FeePercentageChanged(uint256 _amount);\\n\\tevent Claimed(\\n\\t\\tbytes32 indexed _transactionHash,\\n\\t\\taddress indexed _originalTokenAddress,\\n\\t\\taddress indexed _to,\\n\\t\\taddress _sender,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _blockHash,\\n\\t\\tuint256 _logIndex,\\n\\t\\taddress _reciever,\\n\\t\\taddress _relayer,\\n\\t\\tuint256 _fee,\\n\\t\\tuint256 _destinationChainId,\\n\\t\\tuint256 _originChainId\\n\\t);\\n}\",\"keccak256\":\"0xc81633f1272450ddfe15646e93a40c2561ef4dfe144ddb5ad600179dd537270d\",\"license\":\"MIT\"},\"contracts/interface/IFederation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\ninterface IFederation {\\n\\n  /**\\n    @notice Current version of the contract\\n    @return version in v{Number}\\n    */\\n  function version() external pure returns (string memory);\\n\\n  /**\\n    @notice Sets a new bridge contract\\n    @param _bridge the new bridge contract address that should implement the IBridge interface\\n  */\\n  function setBridge(address _bridge) external;\\n\\n  /**\\n    @notice Vote in a transaction, if it has enough votes it accepts the transfer\\n    @param originalTokenAddress The address of the token in the origin (main) chain\\n    @param sender The address who solicited the cross token\\n    @param receiver Who is going to receive the token in the opposite chain\\n    @param value Amount\\n    @param blockHash The block hash in which the transaction with the cross event occurred\\n    @param transactionHash The transaction in which the cross event occurred\\n    @param logIndex Index of the event in the logs\\n\\t\\t@param originChainId Is chainId of the original chain\\n\\t\\t@param destinationChainId Is chainId of the destination chain\\n  */\\n  function voteTransaction(\\n    address originalTokenAddress,\\n    address payable sender,\\n    address payable receiver,\\n    uint256 value,\\n    bytes32 blockHash,\\n    bytes32 transactionHash,\\n    uint32 logIndex,\\n\\t  uint256 originChainId,\\n\\t  uint256\\tdestinationChainId\\n  ) external;\\n\\n  /**\\n    @notice Add a new member to the federation\\n    @param _newMember address of the new member\\n  */\\n  function addMember(address _newMember) external;\\n\\n  /**\\n    @notice Remove a member of the federation\\n    @param _oldMember address of the member to be removed from federation\\n  */\\n  function removeMember(address _oldMember) external;\\n\\n  /**\\n    @notice Return all the current members of the federation\\n    @return Current members\\n  */\\n  function getMembers() external view returns (address[] memory);\\n\\n  /**\\n    @notice Changes the number of required members to vote and approve an transaction\\n    @param _required the number of minimum members to approve an transaction, it has to be bigger than 1\\n  */\\n  function changeRequirement(uint _required) external;\\n\\n  /**\\n    @notice It emmits an HeartBeat like an healthy check\\n  */\\n  function emitHeartbeat(\\n    string calldata federatorVersion,\\n\\t\\tuint256[] calldata fedChainsIds,\\n\\t\\tuint256[] calldata fedChainsBlocks,\\n\\t\\tstring[] calldata fedChainsInfo\\n  ) external;\\n\\n  event Executed(\\n    address indexed federator,\\n    bytes32 indexed transactionHash,\\n    bytes32 indexed transactionId,\\n    address originalTokenAddress,\\n    address sender,\\n    address receiver,\\n    uint256 amount,\\n    bytes32 blockHash,\\n    uint32 logIndex,\\n\\t\\tuint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n  );\\n  event MemberAddition(address indexed member);\\n  event MemberRemoval(address indexed member);\\n  event RequirementChange(uint required);\\n  event BridgeChanged(address bridge);\\n  event Voted(\\n    address indexed federator,\\n    bytes32 indexed transactionHash,\\n    bytes32 indexed transactionId,\\n    address originalTokenAddress,\\n    address sender,\\n    address receiver,\\n    uint256 amount,\\n    bytes32 blockHash,\\n    uint32 logIndex,\\n    uint256 originChainId,\\n\\t\\tuint256\\tdestinationChainId\\n  );\\n  event HeartBeat(\\n    address indexed sender,\\n    uint256 currentChainId,\\n    uint256 currentBlock,\\n    string fedVersion,\\n    uint256[] fedChainsIds,\\n\\t\\tuint256[] fedChainsBlocks,\\n\\t\\tstring[] fedChainsInfo\\n  );\\n\\n}\\n\",\"keccak256\":\"0xbf2a13457c1d20ab5bc5f9f05714496f00252f2a490c3dc9f42f7824af682085\",\"license\":\"MIT\"},\"contracts/zeppelin/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract  Context {\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x71cc501a510c22bb69161bbe13f783a97501338caf0d365a73bb16aa6ab532d7\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || !initialized, \\\"Contract instance is already initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x9d0ae871f81065f2bad4d433b2126c6c09db0682489459538b51ad06a9a16ef8\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract UpgradableOwnable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x48ca8e83c5c67498a5c42aa1955066fd7793f15100b5a691fb2e4aa500e30ca5\",\"license\":\"MIT\"},\"contracts/zeppelin/upgradable/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard is Initializable {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    function initialize() public initializer {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: no reentrant allowed\\\");\\n    }\\n}\",\"keccak256\":\"0xc2eed674da4be2801e8da199f0e163395ba9e59068f501e97671df4fb0902027\",\"license\":\"MIT\"},\"contracts/zeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a97f6df48a8a98c1f94250b2b949d2ddbdd7d471014392b084945b94a9859e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506120ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80639386775a116100f9578063c1b4a1e311610097578063ca6d56dc11610071578063ca6d56dc14610424578063dc8452cd14610437578063e78cea9214610440578063f2fde38b1461045357600080fd5b8063c1b4a1e3146103db578063c1f0808a146103ee578063c4d66de81461041157600080fd5b8063a1fb4acb116100d3578063a1fb4acb1461036f578063a230c52414610382578063a93585f0146103a5578063ba51a6df146103c857600080fd5b80639386775a146103195780639dc8f9c8146103475780639eab52531461035a57600080fd5b8063715018a6116101665780638129fc1c116101405780638129fc1c146102da5780638da5cb5b146102e25780638dd14802146102f35780638f32d59b1461030657600080fd5b8063715018a6146102ac57806379d9ee72146102b45780637b6d343a146102c757600080fd5b80633f78f069116101a25780633f78f0691461023457806354fd4d50146102475780635daf08ca1461026b578063681fc9211461029657600080fd5b806309c69cfa146101c95780630b1ca49a146101f15780631b4613cb14610206575b600080fd5b6101dc6101d7366004611a1b565b610466565b60405190151581526020015b60405180910390f35b6102046101ff366004611a52565b6104b0565b005b6101dc610214366004611a76565b600090815260396020908152604080832033845290915290205460ff1690565b610204610242366004611aa8565b6107ee565b6040805180820182526002815261763360f01b602082015290516101e89190611b33565b61027e610279366004611a76565b610aa9565b6040516001600160a01b0390911681526020016101e8565b61029e603281565b6040519081526020016101e8565b610204610ad3565b6102046102c2366004611bd4565b610b47565b6101dc6102d5366004611a1b565b610c59565b610204610c88565b6033546001600160a01b031661027e565b610204610301366004611a52565b610cf9565b6033546001600160a01b031633146101dc565b6101dc610327366004611cc3565b603960209081526000928352604080842090915290825290205460ff1681565b61029e610355366004611aa8565b610d2c565b610362610db9565b6040516101e89190611cf3565b61029e61037d366004611a76565b610e1b565b6101dc610390366004611a52565b60386020526000908152604090205460ff1681565b6101dc6103b3366004611a76565b6000908152603a602052604090205460ff1690565b6102046103d6366004611a76565b610ea3565b6102046103e9366004611d40565b610fc5565b6101dc6103fc366004611a76565b603a6020526000908152604090205460ff1681565b61020461041f366004611a52565b6112e8565b610204610432366004611a52565b61139e565b61029e60375481565b60355461027e906001600160a01b031681565b610204610461366004611a52565b61156a565b600081815260396020908152604080832033845290915281205460ff16806104a75750600083815260396020908152604080832033845290915290205460ff165b90505b92915050565b6033546001600160a01b031633146104e35760405162461bcd60e51b81526004016104da90611db4565b60405180910390fd5b6001600160a01b0381166105345760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b60448201526064016104da565b6001600160a01b03811660009081526038602052604090205460ff166105a65760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220646f65736e27742065786973746044820152607360f81b60648201526084016104da565b6036546001106106095760405162461bcd60e51b815260206004820152602860248201527f46656465726174696f6e3a2043616e27742072656d6f766520616c6c20746865604482015267206d656d6265727360c01b60648201526084016104da565b60375460365461061b90600190611dff565b10156106835760405162461bcd60e51b815260206004820152603160248201527f46656465726174696f6e3a2043616e27742068617665206c657373207468616e604482015270207265717569726564206d656d6265727360781b60648201526084016104da565b6001600160a01b0381166000908152603860205260408120805460ff191690555b6036546106b390600190611dff565b81101561078357816001600160a01b0316603682815481106106d7576106d7611e16565b6000918252602090912001546001600160a01b03161415610771576036805461070290600190611dff565b8154811061071257610712611e16565b600091825260209091200154603680546001600160a01b03909216918390811061073e5761073e611e16565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610783565b8061077b81611e2c565b9150506106a4565b50603680548061079557610795611e47565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038316917f270bfc616dd36d5cb6b35aac93e6ef22b089c34e6f6ad6f0892797424840897b91a250565b3360009081526038602052604090205460ff166108495760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b60448201526064016104da565b60016034600082825461085c9190611e5d565b909155505060345461086d8261159d565b6040516bffffffffffffffffffffffff1960608c811b821660208401528b811b821660348401528a901b166048820152605c8101889052607c8101879052609c81018690526001600160e01b031960e086901b1660bc82015260009060c00160405160208183030381529060405280519060200120905060006108f78c8c8c8c8c8c8c8c8c610d2c565b90506109038282610c59565b1561090f575050610a3e565b6109198282610466565b15610925575050610a3e565b6000818152603960205260408120600191336001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558087336001600160a01b03167fa7be469662a3e5b2343dce0cefce9d3e114875d7334d8d724d3838cf629c5b108f8f8f8f8f8e8e8e6040516109a8989796959493929190611e75565b60405180910390a46109ba82826115ec565b15610a3b576000818152603a60205260409020805460ff191660011790556109e98c8c8c8c8c8c8c8c8c61170c565b8087336001600160a01b03167f0fe3e5a751f4df1a701ea5d318482623b6a6b59ece98cb64169279b44219355e8f8f8f8f8f8e8e8e604051610a32989796959493929190611e75565b60405180910390a45b50505b6034548114610a9d5760405162461bcd60e51b815260206004820152602560248201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6044820152641b1bddd95960da1b60648201526084016104da565b50505050505050505050565b60368181548110610ab957600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b03163314610afd5760405162461bcd60e51b81526004016104da90611db4565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b3360009081526038602052604090205460ff16610ba25760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b60448201526064016104da565b8483148015610bb057508481145b610bfc5760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a204c656e677468206d6973736d617463680000000060448201526064016104da565b336001600160a01b03167f909659508bf1f4c0ad9b406809f943832e107af28b0b436d9b7d56d3993c77f146438b8b8b8b8b8b8b8b604051610c479a99989796959493929190611f21565b60405180910390a25050505050505050565b6000818152603a602052604081205460ff16806104a7575050506000908152603a602052604090205460ff1690565b600054610100900460ff1680610ca1575060005460ff16155b610cbd5760405162461bcd60e51b81526004016104da9061200e565b600054610100900460ff16158015610cdf576000805461ffff19166101011790555b60016034558015610cf6576000805461ff00191690555b50565b6033546001600160a01b03163314610d235760405162461bcd60e51b81526004016104da90611db4565b610cf6816117b7565b604080516bffffffffffffffffffffffff1960609b8c1b81166020808401919091529a8c1b8116603483015298909a1b90971660488a0152605c890195909552607c880193909352609c8701919091526001600160e01b031960e091821b1660bc87015260c086019190915280850191909152815180850390910181526101009093019052815191012090565b60606036805480602002602001604051908101604052809291908181526020018280548015610e1157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610df3575b5050505050905090565b600080805b603654811015610e9c5760008481526039602052604081206036805491929184908110610e4f57610e4f611e16565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610e8a57610e87600183611e5d565b91505b80610e9481611e2c565b915050610e20565b5092915050565b6033546001600160a01b03163314610ecd5760405162461bcd60e51b81526004016104da90611db4565b60365481818111801590610ee057508015155b8015610eeb57508115155b610f375760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e747360448201526064016104da565b6002831015610f885760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a205265717569726573206174206c6561737420320060448201526064016104da565b60378390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b8383818111801590610fd657508015155b8015610fe157508115155b61102d5760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e747360448201526064016104da565b600054610100900460ff1680611046575060005460ff16155b6110625760405162461bcd60e51b81526004016104da9061200e565b600054610100900460ff16158015611084576000805461ffff19166101011790555b61108d846112e8565b60328711156110de5760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a20546f6f206d616e79206d656d626572730000000060448201526064016104da565b6110ea603689896119a3565b5060005b8781101561128a57603860008a8a8481811061110c5761110c611e16565b90506020020160208101906111219190611a52565b6001600160a01b0316815260208101919091526040016000205460ff1615801561117b5750600089898381811061115a5761115a611e16565b905060200201602081019061116f9190611a52565b6001600160a01b031614155b6111c75760405162461bcd60e51b815260206004820152601b60248201527f46656465726174696f6e3a20496e76616c6964206d656d62657273000000000060448201526064016104da565b6001603860008b8b858181106111df576111df611e16565b90506020020160208101906111f49190611a52565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905588888281811061122e5761122e611e16565b90506020020160208101906112439190611a52565b6001600160a01b03167f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c760405160405180910390a28061128281611e2c565b9150506110ee565b5060378690556040518681527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a16112cc856117b7565b80156112de576000805461ff00191690555b5050505050505050565b600054610100900460ff1680611301575060005460ff16155b61131d5760405162461bcd60e51b81526004016104da9061200e565b600054610100900460ff1615801561133f576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561139a576000805461ff00191690555b5050565b6033546001600160a01b031633146113c85760405162461bcd60e51b81526004016104da90611db4565b6001600160a01b0381166114195760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b60448201526064016104da565b6001600160a01b03811660009081526038602052604090205460ff161561148c5760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220616c72656164792065786973746044820152607360f81b60648201526084016104da565b6036546032116114de5760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a204d6178206d656d6265727320726561636865640060448201526064016104da565b6001600160a01b038116600081815260386020526040808220805460ff1916600190811790915560368054918201815583527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80180546001600160a01b03191684179055517f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c79190a250565b6033546001600160a01b031633146115945760405162461bcd60e51b81526004016104da90611db4565b610cf6816118c4565b468114610cf65760405162461bcd60e51b815260206004820152601d60248201527f46656465726174696f6e3a204e6f7420626c6f636b2e636861696e696400000060448201526064016104da565b6000806115f7611981565b90506000805b603654811015611700576000858152603960205260408120603680549192918490811061162c5761162c611e16565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561166b57611664600183611e5d565b91506116cb565b6000868152603960205260408120603680549192918490811061169057611690611e16565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156116cb576116c8600183611e5d565b91505b8282101580156116dd57506037548210155b156116ee57600193505050506104aa565b806116f881611e2c565b9150506115fd565b50600095945050505050565b60355460405163048aa97560e21b81526001600160a01b038b811660048301528a811660248301528981166044830152606482018990526084820188905260a4820187905263ffffffff861660c483015260e4820185905261010482018490529091169063122aa5d49061012401600060405180830381600087803b15801561179457600080fd5b505af11580156117a8573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b03811661180d5760405162461bcd60e51b815260206004820152601860248201527f46656465726174696f6e3a20456d70747920627269646765000000000000000060448201526064016104da565b6001600160a01b0381163b6118705760405162461bcd60e51b8152602060048201526024808201527f46656465726174696f6e3a20427269646765206973206e6f74206120636f6e746044820152631c9858dd60e21b60648201526084016104da565b603580546001600160a01b0319166001600160a01b0383169081179091556040519081527f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b925517827944979060200160405180910390a150565b6001600160a01b0381166119255760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604482015261737360f01b60648201526084016104da565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60365460009061199390600290612056565b61199e906001611e5d565b905090565b8280548282559060005260206000209081019282156119f6579160200282015b828111156119f65781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906119c3565b50611a02929150611a06565b5090565b5b80821115611a025760008155600101611a07565b60008060408385031215611a2e57600080fd5b50508035926020909101359150565b6001600160a01b0381168114610cf657600080fd5b600060208284031215611a6457600080fd5b8135611a6f81611a3d565b9392505050565b600060208284031215611a8857600080fd5b5035919050565b803563ffffffff81168114611aa357600080fd5b919050565b60008060008060008060008060006101208a8c031215611ac757600080fd5b8935611ad281611a3d565b985060208a0135611ae281611a3d565b975060408a0135611af281611a3d565b965060608a0135955060808a0135945060a08a01359350611b1560c08b01611a8f565b925060e08a013591506101008a013590509295985092959850929598565b600060208083528351808285015260005b81811015611b6057858101830151858201604001528201611b44565b81811115611b72576000604083870101525b50601f01601f1916929092016040019392505050565b60008083601f840112611b9a57600080fd5b50813567ffffffffffffffff811115611bb257600080fd5b6020830191508360208260051b8501011115611bcd57600080fd5b9250929050565b6000806000806000806000806080898b031215611bf057600080fd5b883567ffffffffffffffff80821115611c0857600080fd5b818b0191508b601f830112611c1c57600080fd5b813581811115611c2b57600080fd5b8c6020828501011115611c3d57600080fd5b60209283019a509850908a01359080821115611c5857600080fd5b611c648c838d01611b88565b909850965060408b0135915080821115611c7d57600080fd5b611c898c838d01611b88565b909650945060608b0135915080821115611ca257600080fd5b50611caf8b828c01611b88565b999c989b5096995094979396929594505050565b60008060408385031215611cd657600080fd5b823591506020830135611ce881611a3d565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611d345783516001600160a01b031683529284019291840191600101611d0f565b50909695505050505050565b600080600080600060808688031215611d5857600080fd5b853567ffffffffffffffff811115611d6f57600080fd5b611d7b88828901611b88565b909650945050602086013592506040860135611d9681611a3d565b91506060860135611da681611a3d565b809150509295509295909350565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611e1157611e11611de9565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611e4057611e40611de9565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008219821115611e7057611e70611de9565b500190565b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015263ffffffff1660a083015260c082019290925260e08101919091526101000190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006001600160fb1b03831115611f0457600080fd5b8260051b8083602087013760009401602001938452509192915050565b8a8152600060208b8184015260c06040840152611f4260c084018b8d611ec2565b8381036060850152611f55818a8c611eeb565b90508381036080850152611f6a81888a611eeb565b84810360a08601528581529050818101600586901b820183018760005b88811015611ff657848303601f190184528135368b9003601e19018112611fad57600080fd5b8a01803567ffffffffffffffff811115611fc657600080fd5b8036038c1315611fd557600080fd5b611fe285828a8501611ec2565b958801959450505090850190600101611f87565b5050809450505050509b9a5050505050505050505050565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60008261207357634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122073b3efaba0c333c2eece70e2a3d6136e9bb9435a487bb8d404cfd15d513d4a4a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80639386775a116100f9578063c1b4a1e311610097578063ca6d56dc11610071578063ca6d56dc14610424578063dc8452cd14610437578063e78cea9214610440578063f2fde38b1461045357600080fd5b8063c1b4a1e3146103db578063c1f0808a146103ee578063c4d66de81461041157600080fd5b8063a1fb4acb116100d3578063a1fb4acb1461036f578063a230c52414610382578063a93585f0146103a5578063ba51a6df146103c857600080fd5b80639386775a146103195780639dc8f9c8146103475780639eab52531461035a57600080fd5b8063715018a6116101665780638129fc1c116101405780638129fc1c146102da5780638da5cb5b146102e25780638dd14802146102f35780638f32d59b1461030657600080fd5b8063715018a6146102ac57806379d9ee72146102b45780637b6d343a146102c757600080fd5b80633f78f069116101a25780633f78f0691461023457806354fd4d50146102475780635daf08ca1461026b578063681fc9211461029657600080fd5b806309c69cfa146101c95780630b1ca49a146101f15780631b4613cb14610206575b600080fd5b6101dc6101d7366004611a1b565b610466565b60405190151581526020015b60405180910390f35b6102046101ff366004611a52565b6104b0565b005b6101dc610214366004611a76565b600090815260396020908152604080832033845290915290205460ff1690565b610204610242366004611aa8565b6107ee565b6040805180820182526002815261763360f01b602082015290516101e89190611b33565b61027e610279366004611a76565b610aa9565b6040516001600160a01b0390911681526020016101e8565b61029e603281565b6040519081526020016101e8565b610204610ad3565b6102046102c2366004611bd4565b610b47565b6101dc6102d5366004611a1b565b610c59565b610204610c88565b6033546001600160a01b031661027e565b610204610301366004611a52565b610cf9565b6033546001600160a01b031633146101dc565b6101dc610327366004611cc3565b603960209081526000928352604080842090915290825290205460ff1681565b61029e610355366004611aa8565b610d2c565b610362610db9565b6040516101e89190611cf3565b61029e61037d366004611a76565b610e1b565b6101dc610390366004611a52565b60386020526000908152604090205460ff1681565b6101dc6103b3366004611a76565b6000908152603a602052604090205460ff1690565b6102046103d6366004611a76565b610ea3565b6102046103e9366004611d40565b610fc5565b6101dc6103fc366004611a76565b603a6020526000908152604090205460ff1681565b61020461041f366004611a52565b6112e8565b610204610432366004611a52565b61139e565b61029e60375481565b60355461027e906001600160a01b031681565b610204610461366004611a52565b61156a565b600081815260396020908152604080832033845290915281205460ff16806104a75750600083815260396020908152604080832033845290915290205460ff165b90505b92915050565b6033546001600160a01b031633146104e35760405162461bcd60e51b81526004016104da90611db4565b60405180910390fd5b6001600160a01b0381166105345760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b60448201526064016104da565b6001600160a01b03811660009081526038602052604090205460ff166105a65760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220646f65736e27742065786973746044820152607360f81b60648201526084016104da565b6036546001106106095760405162461bcd60e51b815260206004820152602860248201527f46656465726174696f6e3a2043616e27742072656d6f766520616c6c20746865604482015267206d656d6265727360c01b60648201526084016104da565b60375460365461061b90600190611dff565b10156106835760405162461bcd60e51b815260206004820152603160248201527f46656465726174696f6e3a2043616e27742068617665206c657373207468616e604482015270207265717569726564206d656d6265727360781b60648201526084016104da565b6001600160a01b0381166000908152603860205260408120805460ff191690555b6036546106b390600190611dff565b81101561078357816001600160a01b0316603682815481106106d7576106d7611e16565b6000918252602090912001546001600160a01b03161415610771576036805461070290600190611dff565b8154811061071257610712611e16565b600091825260209091200154603680546001600160a01b03909216918390811061073e5761073e611e16565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610783565b8061077b81611e2c565b9150506106a4565b50603680548061079557610795611e47565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038316917f270bfc616dd36d5cb6b35aac93e6ef22b089c34e6f6ad6f0892797424840897b91a250565b3360009081526038602052604090205460ff166108495760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b60448201526064016104da565b60016034600082825461085c9190611e5d565b909155505060345461086d8261159d565b6040516bffffffffffffffffffffffff1960608c811b821660208401528b811b821660348401528a901b166048820152605c8101889052607c8101879052609c81018690526001600160e01b031960e086901b1660bc82015260009060c00160405160208183030381529060405280519060200120905060006108f78c8c8c8c8c8c8c8c8c610d2c565b90506109038282610c59565b1561090f575050610a3e565b6109198282610466565b15610925575050610a3e565b6000818152603960205260408120600191336001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558087336001600160a01b03167fa7be469662a3e5b2343dce0cefce9d3e114875d7334d8d724d3838cf629c5b108f8f8f8f8f8e8e8e6040516109a8989796959493929190611e75565b60405180910390a46109ba82826115ec565b15610a3b576000818152603a60205260409020805460ff191660011790556109e98c8c8c8c8c8c8c8c8c61170c565b8087336001600160a01b03167f0fe3e5a751f4df1a701ea5d318482623b6a6b59ece98cb64169279b44219355e8f8f8f8f8f8e8e8e604051610a32989796959493929190611e75565b60405180910390a45b50505b6034548114610a9d5760405162461bcd60e51b815260206004820152602560248201527f5265656e7472616e637947756172643a206e6f207265656e7472616e7420616c6044820152641b1bddd95960da1b60648201526084016104da565b50505050505050505050565b60368181548110610ab957600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b03163314610afd5760405162461bcd60e51b81526004016104da90611db4565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b3360009081526038602052604090205460ff16610ba25760405162461bcd60e51b81526020600482015260196024820152782332b232b930ba34b7b71d102737ba102332b232b930ba37b960391b60448201526064016104da565b8483148015610bb057508481145b610bfc5760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a204c656e677468206d6973736d617463680000000060448201526064016104da565b336001600160a01b03167f909659508bf1f4c0ad9b406809f943832e107af28b0b436d9b7d56d3993c77f146438b8b8b8b8b8b8b8b604051610c479a99989796959493929190611f21565b60405180910390a25050505050505050565b6000818152603a602052604081205460ff16806104a7575050506000908152603a602052604090205460ff1690565b600054610100900460ff1680610ca1575060005460ff16155b610cbd5760405162461bcd60e51b81526004016104da9061200e565b600054610100900460ff16158015610cdf576000805461ffff19166101011790555b60016034558015610cf6576000805461ff00191690555b50565b6033546001600160a01b03163314610d235760405162461bcd60e51b81526004016104da90611db4565b610cf6816117b7565b604080516bffffffffffffffffffffffff1960609b8c1b81166020808401919091529a8c1b8116603483015298909a1b90971660488a0152605c890195909552607c880193909352609c8701919091526001600160e01b031960e091821b1660bc87015260c086019190915280850191909152815180850390910181526101009093019052815191012090565b60606036805480602002602001604051908101604052809291908181526020018280548015610e1157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610df3575b5050505050905090565b600080805b603654811015610e9c5760008481526039602052604081206036805491929184908110610e4f57610e4f611e16565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610e8a57610e87600183611e5d565b91505b80610e9481611e2c565b915050610e20565b5092915050565b6033546001600160a01b03163314610ecd5760405162461bcd60e51b81526004016104da90611db4565b60365481818111801590610ee057508015155b8015610eeb57508115155b610f375760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e747360448201526064016104da565b6002831015610f885760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a205265717569726573206174206c6561737420320060448201526064016104da565b60378390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b8383818111801590610fd657508015155b8015610fe157508115155b61102d5760405162461bcd60e51b815260206004820181905260248201527f46656465726174696f6e3a20496e76616c696420726571756972656d656e747360448201526064016104da565b600054610100900460ff1680611046575060005460ff16155b6110625760405162461bcd60e51b81526004016104da9061200e565b600054610100900460ff16158015611084576000805461ffff19166101011790555b61108d846112e8565b60328711156110de5760405162461bcd60e51b815260206004820152601c60248201527f46656465726174696f6e3a20546f6f206d616e79206d656d626572730000000060448201526064016104da565b6110ea603689896119a3565b5060005b8781101561128a57603860008a8a8481811061110c5761110c611e16565b90506020020160208101906111219190611a52565b6001600160a01b0316815260208101919091526040016000205460ff1615801561117b5750600089898381811061115a5761115a611e16565b905060200201602081019061116f9190611a52565b6001600160a01b031614155b6111c75760405162461bcd60e51b815260206004820152601b60248201527f46656465726174696f6e3a20496e76616c6964206d656d62657273000000000060448201526064016104da565b6001603860008b8b858181106111df576111df611e16565b90506020020160208101906111f49190611a52565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905588888281811061122e5761122e611e16565b90506020020160208101906112439190611a52565b6001600160a01b03167f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c760405160405180910390a28061128281611e2c565b9150506110ee565b5060378690556040518681527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a16112cc856117b7565b80156112de576000805461ff00191690555b5050505050505050565b600054610100900460ff1680611301575060005460ff16155b61131d5760405162461bcd60e51b81526004016104da9061200e565b600054610100900460ff1615801561133f576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561139a576000805461ff00191690555b5050565b6033546001600160a01b031633146113c85760405162461bcd60e51b81526004016104da90611db4565b6001600160a01b0381166114195760405162461bcd60e51b81526020600482015260186024820152772332b232b930ba34b7b71d1022b6b83a3c9036b2b6b132b960411b60448201526064016104da565b6001600160a01b03811660009081526038602052604090205460ff161561148c5760405162461bcd60e51b815260206004820152602160248201527f46656465726174696f6e3a204d656d62657220616c72656164792065786973746044820152607360f81b60648201526084016104da565b6036546032116114de5760405162461bcd60e51b815260206004820152601f60248201527f46656465726174696f6e3a204d6178206d656d6265727320726561636865640060448201526064016104da565b6001600160a01b038116600081815260386020526040808220805460ff1916600190811790915560368054918201815583527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80180546001600160a01b03191684179055517f72114e270de66b9d2710ecf140403e5e99b1574767d6a8197bdc8d807a46e7c79190a250565b6033546001600160a01b031633146115945760405162461bcd60e51b81526004016104da90611db4565b610cf6816118c4565b468114610cf65760405162461bcd60e51b815260206004820152601d60248201527f46656465726174696f6e3a204e6f7420626c6f636b2e636861696e696400000060448201526064016104da565b6000806115f7611981565b90506000805b603654811015611700576000858152603960205260408120603680549192918490811061162c5761162c611e16565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561166b57611664600183611e5d565b91506116cb565b6000868152603960205260408120603680549192918490811061169057611690611e16565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156116cb576116c8600183611e5d565b91505b8282101580156116dd57506037548210155b156116ee57600193505050506104aa565b806116f881611e2c565b9150506115fd565b50600095945050505050565b60355460405163048aa97560e21b81526001600160a01b038b811660048301528a811660248301528981166044830152606482018990526084820188905260a4820187905263ffffffff861660c483015260e4820185905261010482018490529091169063122aa5d49061012401600060405180830381600087803b15801561179457600080fd5b505af11580156117a8573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b03811661180d5760405162461bcd60e51b815260206004820152601860248201527f46656465726174696f6e3a20456d70747920627269646765000000000000000060448201526064016104da565b6001600160a01b0381163b6118705760405162461bcd60e51b8152602060048201526024808201527f46656465726174696f6e3a20427269646765206973206e6f74206120636f6e746044820152631c9858dd60e21b60648201526084016104da565b603580546001600160a01b0319166001600160a01b0383169081179091556040519081527f9775531310b2880b61484ed85cbb0b491c8fde3a07f289c63b925517827944979060200160405180910390a150565b6001600160a01b0381166119255760405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a206e6577206f776e6572206973207a65726f206164647265604482015261737360f01b60648201526084016104da565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60365460009061199390600290612056565b61199e906001611e5d565b905090565b8280548282559060005260206000209081019282156119f6579160200282015b828111156119f65781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906119c3565b50611a02929150611a06565b5090565b5b80821115611a025760008155600101611a07565b60008060408385031215611a2e57600080fd5b50508035926020909101359150565b6001600160a01b0381168114610cf657600080fd5b600060208284031215611a6457600080fd5b8135611a6f81611a3d565b9392505050565b600060208284031215611a8857600080fd5b5035919050565b803563ffffffff81168114611aa357600080fd5b919050565b60008060008060008060008060006101208a8c031215611ac757600080fd5b8935611ad281611a3d565b985060208a0135611ae281611a3d565b975060408a0135611af281611a3d565b965060608a0135955060808a0135945060a08a01359350611b1560c08b01611a8f565b925060e08a013591506101008a013590509295985092959850929598565b600060208083528351808285015260005b81811015611b6057858101830151858201604001528201611b44565b81811115611b72576000604083870101525b50601f01601f1916929092016040019392505050565b60008083601f840112611b9a57600080fd5b50813567ffffffffffffffff811115611bb257600080fd5b6020830191508360208260051b8501011115611bcd57600080fd5b9250929050565b6000806000806000806000806080898b031215611bf057600080fd5b883567ffffffffffffffff80821115611c0857600080fd5b818b0191508b601f830112611c1c57600080fd5b813581811115611c2b57600080fd5b8c6020828501011115611c3d57600080fd5b60209283019a509850908a01359080821115611c5857600080fd5b611c648c838d01611b88565b909850965060408b0135915080821115611c7d57600080fd5b611c898c838d01611b88565b909650945060608b0135915080821115611ca257600080fd5b50611caf8b828c01611b88565b999c989b5096995094979396929594505050565b60008060408385031215611cd657600080fd5b823591506020830135611ce881611a3d565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611d345783516001600160a01b031683529284019291840191600101611d0f565b50909695505050505050565b600080600080600060808688031215611d5857600080fd5b853567ffffffffffffffff811115611d6f57600080fd5b611d7b88828901611b88565b909650945050602086013592506040860135611d9681611a3d565b91506060860135611da681611a3d565b809150509295509295909350565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611e1157611e11611de9565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611e4057611e40611de9565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008219821115611e7057611e70611de9565b500190565b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015263ffffffff1660a083015260c082019290925260e08101919091526101000190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006001600160fb1b03831115611f0457600080fd5b8260051b8083602087013760009401602001938452509192915050565b8a8152600060208b8184015260c06040840152611f4260c084018b8d611ec2565b8381036060850152611f55818a8c611eeb565b90508381036080850152611f6a81888a611eeb565b84810360a08601528581529050818101600586901b820183018760005b88811015611ff657848303601f190184528135368b9003601e19018112611fad57600080fd5b8a01803567ffffffffffffffff811115611fc657600080fd5b8036038c1315611fd557600080fd5b611fe285828a8501611ec2565b958801959450505090850190600101611f87565b5050809450505050509b9a5050505050505050505050565b60208082526028908201527f436f6e747261637420696e7374616e636520697320616c726561647920696e696040820152671d1a585b1a5e995960c21b606082015260800190565b60008261207357634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122073b3efaba0c333c2eece70e2a3d6136e9bb9435a487bb8d404cfd15d513d4a4a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMember(address)": {
        "params": {
          "_newMember": "address of the new member"
        }
      },
      "changeRequirement(uint256)": {
        "details": "Emits the RequirementChange event",
        "params": {
          "_required": "the number of minimum members to approve an transaction, it has to be bigger than 1"
        }
      },
      "emitHeartbeat(string,uint256[],uint256[],string[])": {
        "details": "Emits HeartBeat event"
      },
      "getMembers()": {
        "returns": {
          "_0": "Current members"
        }
      },
      "getTransactionCount(bytes32)": {
        "params": {
          "transactionId": "The transaction hashed from getTransactionId function"
        }
      },
      "getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)": {
        "details": "It encodes and applies keccak256 to the parameters received in the same order",
        "params": {
          "amount": "Could be the amount or the tokenId",
          "blockHash": "The block hash in which the transaction with the cross event occurred",
          "destinationChainId": "Is chainId of the destination chain",
          "logIndex": "Index of the event in the logs",
          "originChainId": "Is chainId of the original chain",
          "originalTokenAddress": "The address of the token in the origin (main) chain",
          "receiver": "Who is going to receive the token in the opposite chain",
          "sender": "The address who solicited the cross token",
          "transactionHash": "The transaction in which the cross event occurred"
        },
        "returns": {
          "_0": "The hash generated by the parameters."
        }
      },
      "initialize(address)": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeMember(address)": {
        "params": {
          "_oldMember": "address of the member to be removed from federation"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBridge(address)": {
        "details": "Emits BridgeChanged event",
        "params": {
          "_bridge": "the new bridge contract address that should implement the IBridge interface"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "version()": {
        "returns": {
          "_0": "version in v{Number}"
        }
      },
      "voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)": {
        "params": {
          "blockHash": "The block hash in which the transaction with the cross event occurred",
          "destinationChainId": "Is chainId of the destination chain",
          "logIndex": "Index of the event in the logs",
          "originChainId": "Is chainId of the original chain",
          "originalTokenAddress": "The address of the token in the origin (main) chain",
          "receiver": "Who is going to receive the token in the opposite chain",
          "sender": "The address who solicited the cross token",
          "transactionHash": "The transaction in which the cross event occurred",
          "value": "Amount"
        }
      }
    },
    "stateVariables": {
      "isMember": {
        "details": "The address should be a member to vote in transactions"
      },
      "required": {
        "details": "It should have at least the required amount of members"
      },
      "votes": {
        "details": "the members should approve the transaction by 50% + 1"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(address)": {
        "notice": "Add a new member to the federation"
      },
      "changeRequirement(uint256)": {
        "notice": "Changes the number of required members to vote and approve an transaction"
      },
      "emitHeartbeat(string,uint256[],uint256[],string[])": {
        "notice": "It emits an HeartBeat like an health check"
      },
      "getMembers()": {
        "notice": "Return all the current members of the federation"
      },
      "getTransactionCount(bytes32)": {
        "notice": "Get the amount of approved votes for that transactionId"
      },
      "getTransactionId(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)": {
        "notice": "Gets the hash of transaction from the following parameters encoded and keccaked"
      },
      "isMember(address)": {
        "notice": "All the addresses that are members of the federation"
      },
      "processed(bytes32)": {
        "notice": "(bytes32) transactionId => (bool) votedCheck if that transaction was already processed"
      },
      "removeMember(address)": {
        "notice": "Remove a member of the federation"
      },
      "required()": {
        "notice": "The minimum amount of votes to approve a transaction"
      },
      "setBridge(address)": {
        "notice": "Sets a new bridge contract"
      },
      "version()": {
        "notice": "Current version of the contract"
      },
      "voteTransaction(address,address,address,uint256,bytes32,bytes32,uint32,uint256,uint256)": {
        "notice": "Vote in a transaction, if it has enough votes it accepts the transfer"
      },
      "votes(bytes32,address)": {
        "notice": "(bytes32) transactionId = keccak256( abi.encodePacked( originalTokenAddress, sender, receiver, amount, blockHash, transactionHash, logIndex ) ) => ( (address) members => (bool) voted )Votes by members by the transaction ID"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11947,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11950,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11990,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12236,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 12955,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "_guardCounter",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 3190,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "bridge",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IBridge)5956"
      },
      {
        "astId": 3193,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "members",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3196,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "required",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 3201,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "isMember",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3208,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "votes",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3213,
        "contract": "contracts/Federation/Federation.sol:Federation",
        "label": "processed",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)5956": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}